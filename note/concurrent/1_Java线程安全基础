
    线程安全的定义是什么？

    类被多个线程访问时，可以持续的进行正确的行为。
    即多线程 访问类时，计算的正确性 得以保证，称为线程安全。


    什么是共享变量？
    一个变量可以被多线程访问

    什么是可变？
    可变是对于共享变量而言的，可变共享对象 的状态(fields) 在其生命周期内可以修改。


    共享变量的可变与不可变指的是什么？
    是指共享变量的状态，共享变量的状态就是对象及其数据。 也就是 instance ,普通成员fields , 静态成员 static fields. 等。

    什么是可重入锁？
    synchronized锁，Lock锁 都是 可重入锁。 这是针对一个线程而言的。

    一个线程可以进入 两个 相同锁(synchronized锁 )的方法。

    对于多线程而言，什么是原子性？
    不可分割的 一条 或 一组 操作。

    对于多线程而言，什么是可见性？
    一个线程修改一个共享变量后，其他线程可以立即访问到最新值。


java 并发编程：

	如何实现线程安全？
		一、不(跨线程的)使用共享变量 ：  采用线程封闭 方式

			不共享变量这种方式的特点：不对外发布共享变量，只有执行线程看到。

			线程封闭：变量在线程内部使用，不共享。

			使用ThreadLocal ：

			线程栈内使用变量 ： 变量存在与执行线程的 栈中，其他线程无法访问这个栈。

			public int loadTheArk(Collection<Animal> candidates) {
				SortedSet<Animal> animals;
				int numPairs = 0;
				Animal candidate = null;

				// animals 只能在方法内，移出到方法外就是逸出，造成线程不安全。

				animals = new TreeSet<Animal>(new SpeciesGenderComparator());
				animals.addAll(candidates);
				for (Animal a : animals) {
				if (candidate == null || !candidate.isPotentialMate(a))
				candidate = a;
				else {
				ark.load(new AnimalPair(candidate, a));
				++numPairs;
				candidate = null;
				}
				}
				return numPairs;
			}


		二、(安全发布)使用不可变的共享变量： 不可变的对象是线程安全的

            什么是安全发布？
                在构造函数执行结束之气，不能访问对象的数据。

			什么样的变量就是不可变的 ？ final

				1、对象的状态(也就是所有的成员属性) 不能在创建后再被修改。
				2、对象的状态都是final类型的，且 对象被正确的创建，创建期间没有发送 this引用的逸出(不能传递this)。

				注意：并不是必须都得final 类型，比如String类。 这个暂时这样理解。

			例1：

			// 此类是线程安全的，因为满足不可变的特性。
			public final class ThreeStooges {
				// 1：类的所有成员是final 的， 在创建后不能修改 。
				private final Set<String> stooges = new HashSet<String>();
				// 2、类的构造函数没有造成 this引用的逸出.
				public ThreeStooges() {

					stooges.add("Moe");
					stooges.add("Larry");
					stooges.add("Curly");
				}

				public boolean isStooge(String name) {
					return stooges.contains(name);
				}
			}

			例2：

			// 为什么是不可变的？
				 因为此类没有共享变量 ，不影响其他线程访问本类对象时的正确性。

			// 1、因为没有没有 fields
			// 2、没有引用其他类的字段
			public class StatelessFactorizer implements Servlet {

				public void service(ServletRequest req, ServletResponse resp) {

					// 3、变量都在方法内，也就是在当前线程的栈中，只有执行线程才能访问，不影响其他线程。

					BigInteger i = extractFromRequest(req);
					BigInteger[] factors = factor(i);
					encodeIntoResponse(resp, factors);
				}
			}

			例3：

			class OneValueCache {

				private final BigInteger lastNumber;

				private final BigInteger[] lastFactors;

				public OneValueCache(BigInteger i,BigInteger[] factors) {
					lastNumber = i;
					// copyOf 或者 clone 都可以
					lastFactors = Arrays.copyOf(factors, factors.length);
				}

				public BigInteger[] getFactors(BigInteger i) {
					if (lastNumber == null || !lastNumber.equals(i))
					return null;
					else
					return Arrays.copyOf(lastFactors, lastFactors.length);
				}
			}

			例4：错误例子： 不正确的发布 不可变对象。

			public Holder holder;
			// 错误的发布
			public void init(){
				holder = new Holder(22)
			}

			// 不可变对象Holder
			class Holder{
				private final int a ;
				public Holder(int a ){
					this.a = a ;
				}
			}

			修改后：
			// 正确的发布
			public final Holder holder;
			public  constructor(){
				holder = new Holder(22)
			}

			5、
				使用volatile修饰不可变对象。

				例子：
					用volatile 来修饰(发布) 不可变对象

					public class VolatileCachedFactorizer implements Servlet {
						// 正确的发布不可变对象 cache.
						private volatile OneValueCache cache = new OneValueCache(null, null);

						public void service(ServletRequest req, ServletResponse resp) {
							BigInteger i = extractFromRequest(req);
							BigInteger[] factors = cache.getFactors(i);
							if (factors == null) {
							factors = factor(i);
							cache = new OneValueCache(i, factors);
							}
							encodeIntoResponse(resp, factors);
						}
					}

			例6：
			案例：手写递归队列

		三、使用(发布)可变共享变量，并保证多线程操作变量时的  原子性 和 可见性 。

			1、(What)什么是竞争条件： 就是一组乱序的读写操作。（必定含有写操作。因此必定有计算结果要读取）

			多线程操作可变共享变量时，通常都会产生竞争条件，而竞争条件影响计算的正确性。
			( 除非多线程按照幸运的 时序 来 执行读写操作，但这几乎不可能 )

			2、常见的竞争条件有：
				读改写(read-modify-write) : 例如 i++
				检测再运行(check-then-action) : 例如：if 语句

				private XXX instance = null;

				public XXX getInstance(){
					if(instance==null)   // 延迟初始化
						instance = new XXX();
				}

			竞争条件必定含有 n(n>0)组读写操作。

			3、(Why)竞争条件的影响：直接造成多线程计算过程中出现错误值，过期值，线程不安全。

			4、(How)如何保证原子性，可见性？( 如何消除竞争条件 )
				保证原子性，可见性 , 就是消除竞争条件带来的线程不安全影响，就是保证线程安全。

				到这里可以回答两个疑问了：

				为什么要保证原子性？
					因为要消除竞争条件 造成的计算错误 。 计算错误直接影响 正确性。

				为什么要保证可见性？
					竞争条件消除后，计算的结果需要让其他线程 第一时间看到，否则，其他线程 读取到的就是共享变量的过期值。
					过期值 也影响计算的正确性。

				可以简单的这样理解：
					原子性消除了错误值。
					可见性消除了过期值。
					错误值 和 过期值 都影响程序的正确性。

			5、如果是多个可变共享变量，要注意 ：

				if(多个共享变量有关联){

					// 相关联的所有 共享变量 必须同时 保证原子性，可见性。

				}else{

					// 作为单个 共享变量 操作就可以了。
				}

			6、( Do ) 如何实现消除竞争条件( 保证原子性 和 可见性 )。

                6.1、使用锁，锁机制控制共享变量， 锁同时保证了 原子性 和 可见性。

                    1、synchronized(独占锁)：

                        java内置的 强原子性 操作机制， (也叫独占锁、互斥锁，隐士锁，可重入锁)

                        由同一个锁保护的 synchronized 代码块，会被原子性的执行，也就是不可分割的单元运行，
                        不可能看到有多个线程同时 执行由同一个锁保护的 synchronized 代码块。

                        synchronized 锁保证了多线程在操作可变共享变量 时的原子性、可见性。
                        使用synchronized锁 时， 读线程 和 写线程 必须用同一个锁对象。这样才能保证所有线程
                        看到共享变量的最新值。


                        问题：在多线程操作一个可变共享变量时，为什么要求所有线程用同一把锁来同步？
                              为了保证一个线程对变量的写入，其他线程都可以看见。否则其他线程看到的可能是过期的数值。

			        2、显式锁：Lock、ReadWriteLock.等
                        TODO()

                6.2、使用原子变量类(java.util.concurrent.atomic.*) 或 采用非阻塞算法的容器(java.util.concurrent.ConcurrentXXX)
                     操作共享变量。
                     它们底层都采用了 硬件支持的原子操作指令：compareAndSwap/compareAndSet
                     compareAndSwap/compareAndSet 既能提供原子性，又能提供可见性保证。

                    例子1： 线程安全的 ：

                    原子类： java.util.concurrent.atomic.*

                        // AtomicLong ：保证原子性
                        // final : 保证可见性
                        public class CountingFactorizer implements Servlet {

                            private final AtomicLong count = new AtomicLong(0);

                            public long getCount() { return count.get(); }

                            public void service(ServletRequest req, ServletResponse resp) {

                                BigInteger i = extractFromRequest(req);
                                BigInteger[] factors = factor(i);
                                count.incrementAndGet();
                                encodeIntoResponse(resp, factors);
                            }
                        }

                    例子2：线程不安全 ，虽然对多个共享变量 进行了 原子操作，但是它们有关联。
                        这样 就不是 原子操作就失效了，必须是 所有有关联的 共享变量 一起进行原子操作。


                        public class UnsafeCachingFactorizer implements Servlet {
                        // 多个原子变量
                        private final AtomicReference<BigInteger> lastNumber = new AtomicReference<BigInteger>();
                        private final AtomicReference<BigInteger[]> lastFactors = new AtomicReference<BigInteger[]>();

                        public void service(ServletRequest req, ServletResponse resp) {

                            BigInteger i = extractFromRequest(req);
                            // if 语句使得 多个原子变量之间有了联系。
                            if (i.equals(lastNumber.get()))
                                encodeIntoResponse(resp, lastFactors.get() );
                            else {
                                BigInteger[] factors = factor(i);
                                lastNumber.set(i);
                                lastFactors.set(factors);
                                encodeIntoResponse(resp, factors);
                            }
                         }
                        }

					修改后：
					public void service(ServletRequest req, ServletResponse resp) {

						BigInteger i = extractFromRequest(req);
						//  使用锁 保证多个 相关联的 共享变量的原子操作。
						synchronized(一把锁){

							if (i.equals(lastNumber.get()))
								encodeIntoResponse(resp, lastFactors.get() );
							else {
								BigInteger[] factors = factor(i);
								lastNumber.set(i);
								lastFactors.set(factors);
								encodeIntoResponse(resp, factors);
							}
						}

					}

			 保证可见性 / 同时也是安全发布 ：

				volatile ： 只保证可见性。( 提供弱原子性, 弱原子性是啥不懂，这里忽略这个特性 )

				静态代码块初始化 对象(的引用）。

				使用 AtomicReference 封装对象。

				使用 final 修改 对象。

				使用锁


			X、组合方式： 使用线程安全的对象管理 可变共享变量

			 	 Hashtable
				 Vector

				 Collections.synchronizedMap()
				 Collections.synchronizedList()
				 Collections.synchronizedSet()

				 ConcurrentMap
				 ConcurrentLinkedQueue

				 CopyOnWriteArrayList

			    使用线程安全的容器 来管理 对象 也可以达到线程安全的目的。

			使用共享变量总结：

				不可变共享对象 可以 任意时刻使用。不用考虑线程安全问题。

				将 可变共享对象 作为 不可变共享对象 来用时，必须安全发布。

				// 将 可变共享对象 Date 作为 不可变共享对象来用。
				public final Map<String, Date> map = Collections.synchronizedMap(new HashMap<String, Date>());

				可变共享对象 使用时 必须安全 发布 ，且是线程安全的对象。

		Question ：

		1、如何安全的使用(发布)可变共享变量？
				发布变量：
					volatile ：
					静态代码块初始化 对象(的引用）。
					使用 AtomicReference 封装对象。
					使用 final 修改 对象。
				使用变量：
					同步 也就是 加锁
					线程安全的类管理

		2、发布是什么意思？ 这里理解为 多线程可以共享它。我们称为发布。

		3、同步是什么意思？
			个人理解：保证原子性和可见性 就是 同步。

		4、原子性和可见性有啥关系？
			为了线程安全，使用可变共享变量时，必须保证的两个特性。

		5、原子性和同步有什么关系？
			原子性是实现同步的其中一步。 另外一步是可见性。

----------------------------------------------------------------------------------------------------------------------------------