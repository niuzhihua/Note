
1：Bitmap 内存大小 怎么确定？
	图片格式有以下几种：
	ARGB_8888 : 这个格式带透明度，内存占用计算方式为：width * height * 4  
	RGB_565	  : 不带透明度，内存占用计算方式为：width * height * 2

	获取内存大小：
	Bitmap bitmap = BitmapFactory.decodeResource(...)	
	内存大小：bitmap.getByteCount();

	内存大小的计算和文件大小 没关系， 跟文件的格式（ARGB_8888,RGB_565） 和 尺寸(100 * 100)有关系。

1.1：Bitmap 内存分配：

	在Android 3.0 以下 ，Bitmap 的内存时在native层 分配的。
	在3.0 - 8.0 以下 ，在java 层分配。
	在8.0 ： 又重回native 分配。

2：Bitmap 复用好处？

	如果从网络上下载一个图片 就申请一块内存来加载的化，这样图片多时就会频繁申请内存，可能造成内存抖动。
	因此利用bitmap 内存复用技术可以减少这一情况出现。

	在介绍复用之前先来了解以下Bitmap 缓存处理。这里用LruCache.

	LruCache : 当缓存池满时，最近最先使用的 最不容易回收。

2.1 ： Bitmap 复用设置条件限制：

	1：必须设置 BitmapFactory.Options options 的 options.inMutable 为true: 
			// 设置为异变的，才可以复用内存。
			options.inMutable = true;

	2： 版本限制：android 2.3 版本之后 也就是3.0开始才可以使用复用技术。

	3：Android 版本19 之前(不包括19) 如果要复用Bitmap对象，那么同等宽高，inSampleSize 的值为1 时才可以复用。

	  19 之后： 被复用的Bitmap 内存必须大于 申请的内存。

3：Bitmap内存缓存池：LruCache

	LruCache 使用三步骤：      

	1： 初始化

		     //设置缓存大小为 可用内存的 十分之一。
        Context c = context.getApplicationContext();
        ActivityManager am = (ActivityManager) c.getSystemService(Context.ACTIVITY_SERVICE);

        // 返回当前程序可用的最大内存 ：单位时 M
        int memory = am.getMemoryClass() / 10;

        int size = memory * 1024 * 1024;

        cache = new LruCache<String, Bitmap>(size) {
            /**
             * @param key
             * @param value
             * @return 返回缓存中 value占用的内存，如果总大小时100 ，sizeOf 返回1 ，那么缓存池中就可以
             *         存放100个。
             */
            @Override
            protected int sizeOf(String key, Bitmap value) {
                return value.getByteCount();
            }
            /**
             * 当value从 缓存池中 移除时回调
             * @param evicted
             * @param key
             * @param oldValue
             * @param newValue
             */
            @Override
            protected void entryRemoved(boolean evicted, String key, Bitmap oldValue, Bitmap newValue) {
                super.entryRemoved(evicted, key, oldValue, newValue);
            }
        };


	2：放入缓存 put(String key,String value)

	 // 放入内存缓存池
    	public void put(String key, Bitmap value) {
        	cache.put(key, value);
    	}

	3: 从缓存获取 value get(String key)

    	//从内存缓存池中 获取
    	public Bitmap get(String key) {
       	 return cache.get(key);
    	}

4: Bitmap 复用池: 这里我把复用池 和缓存池 放在一起，封装在工具类中，当我们从缓存池中 get出来时，就可以将此Bitmap
	放入复用池。 来保存可以复用的Bitmap。需要复用图片内存时，就可以从这个复用池中获取。


	Set<WeakReference<String,Bitmap>>   reuseMemeryCache 

 	//1: 初始化复用池
   	 private void initReuseMemoryCache() {
        	reuseMemeryCache = Collections.synchronizedSet(new HashSet<WeakHashMap<String, Bitmap>>());
    	 }

	//2: 当从 缓存池中移除Bitmap对象时 添加到 复用池。


	   /**
             * 当value从 缓存池中 移除时回掉
             * @param evicted
             * @param key
             * @param oldValue
             * @param newValue
             */
            @Override
            protected void entryRemoved(boolean evicted, String key, Bitmap oldValue, Bitmap newValue) {

                // 判断是否可以复用
                if(oldValue.isMutable()){
                    reuseMemeryCache.add(new WeakReference<>(oldValue,getReferenceQueue() ));
                }
                super.entryRemoved(evicted, key, oldValue, newValue);
            }

	
4.1 ： 给复用池 设置一个 引用队列，为什么这么做呢？	

 	reuseMemeryCache.add(new WeakReference<>(oldValue,getReferenceQueue() ));

	因为：由于8.0 Bitmap的内存开辟 是在native层，所以需要手动释放。所以这里用引用队列 配合 线程来释放 内存。

	getReferenceQueue() 方法实现 ：

	    // 复用池的引用队列： 当弱引用需要被回收， 会放入引用队列。
    	public ReferenceQueue<Bitmap> getReferenceQueue() {

        if (referenceQueue == null) {
            referenceQueue = new ReferenceQueue<>();
            // 由于8.0 Bitmap的内存开辟 是在native层，所以需要手动释放。
            // 这里用引用队列 配合 线程来释放 内存。
            thread = new Thread(new Runnable() {
                @Override
                public void run() {
                    while (!isThreadShutDown) {
                        try {
                            Reference<? extends Bitmap> reference = referenceQueue.remove();
                            Bitmap b = reference.get();
                            if (b != null && !b.isRecycled()) {
                                b.recycle();
                            }
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }

                }
            });
            thread.start();
        }
        return referenceQueue;
    }


4.2： 向复用池中添加Bitmap

	//不考虑图片复用 的话 getByteCount() 和 getAllocationByteCount() 是不是 一样的

       @Override
            protected int sizeOf(String key, Bitmap value) {
                // 如果不考虑图片复用：getByteCount() == getAllocationByteCount()
                // 在19 版本以下，只有同等大小的图片 并且sampleSize ==1 ，才可以复用，
                // 19 版本以上：被复用的图片必须大于要复用的bitmap的大小。

                // 由于sizeOf 方法返回 要被复用的Bitmap，所以它的内存是整个Bitmap占用的内存。
                // 而要复用内粗 的bitmap 肯定小于被复用的图片内存。
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                    // getByteCount() < getAllocationByteCount():当前sizeOf返回的
                    return value.getAllocationByteCount();
                }
                // 在19 版本以下，只有同等大小的图片 并且sampleSize ==1 ，才可以复用
                return value.getByteCount();
            }




5 ：总结复用原理： 
		说到复用 ，就要结合缓存池和复用池来实现，当缓存池满时，如果继续往缓存池中添加Bitmap对象，那么缓存池就会移除最少使用的Bitmap。
		这时，当缓存池LruCache 移除 一个对象时，（会回调entryRemoved 方法）我们把这个对象添加到复用池 (复用池是一个存放WeakReference
		的Set集合，其中WeakReference有关联这引用队列),当GC 没有执行时，那么就可以 从复用池中来获取对象复用，当GC 执行时，直接回收复用池
		里面的弱引用对象。 

		回收说明：
		3.0 -8.0 (不包括8.0 ) :Bitmap 的内存开辟时在java层，8.0开始 放在了native层，所以需要手动回收。
		
		8.0处理：由于我们给弱引用设置了引用队列，当弱引用需要被回收时，就会加入到引用队列中， 那么就可以开启一个线程来 回收。



6：从复用池中查找一个可以复用内存的Bitmap .

	 

   /**
     * 从复用池 中 获取(在此宽，高，inSampleSize下)可以复用内存的bitmap, 获取完成后删除。
     *
     * @param w            要复用内存的bitmap 的 宽
     * @param h            要复用内存的bitmap 的 高
     * @param inSampleSize 要复用内存的bitmap 的 缩放系数
     * @return 可以复用内存的bitmap
     */
    public Bitmap getReusedBitmap(int w, int h, int inSampleSize) {

        Bitmap reUseBitmap = null;
        Iterator<WeakReference<Bitmap>> iterator = reuseMemeryCache.iterator();
        while (iterator.hasNext()) {
            Bitmap b = iterator.next().get();
            if (b != null) {
                // 检测是否可以 复用。
                // >=19（被复用的bitmap内存大小必须大于要复用bitmap）
                // <19 (被复用的bitmap 宽高 等同于 要复用bitmap)
                if (check(b, w, h, inSampleSize)) {
                    reUseBitmap = b;
                    iterator.remove();
                    break;
                }
            } else {
                // 如果是null ,删除掉
                iterator.remove();
            }
        }
        return reUseBitmap;
    }

6.1 : 检查当前复用池中的Bitmap 是否可以复用：

	 /**
     * 检查是否可以复用
     *
     * @param b            被复用的 bitmap
     * @param w            要复用内存的bitmap 的 宽
     * @param h            要复用内存的bitmap 的 高
     * @param inSampleSize 要复用内存的bitmap 的 缩放系数
     * @return
     */
    private boolean check(Bitmap b, int w, int h, int inSampleSize) {

        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {
            boolean belowKITKAT = b.getWidth() == w && b.getHeight() == h && inSampleSize == 1;
            return belowKITKAT;
        }

        // 19 版本以上 图片内存复用判断规则：被复用的图片内存 大于 要复用的图片的内存。

        if (inSampleSize > 1) {
            w = w / inSampleSize;
            h = h / inSampleSize;
        }

        int type;
        Bitmap.Config c = b.getConfig();
        if (c == Bitmap.Config.ARGB_8888) {
            type = 4;
        } else if (c == Bitmap.Config.RGB_565) {
            type = 2;
        } else {
            type = 2;
        }
        // 计算被复用bitmap 缩放以后 的实际内存大小
        int byteCount = w * h * type;
        int allocatCount = b.getAllocationByteCount();

        if (byteCount <= allocatCount) {
            // 此 bitmap 可以被复用。
            return true;
        }

        return false;
    }












































































	