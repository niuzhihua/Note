
Binder在驱动中的表述：？？？？
	
	概述：
		驱动是通信的核心，系统中所有的【Binder对象】 以及每个 【Binder对象在相应进程中的引用】 都登记在驱动中。
		驱动记录着 Binder引用与Binder对象 之间的多对一 关系。
		
		驱动的职责包括但不限于：

			为Binder引用 找到对应的 Binder对象 ；
			
			在某个进程中为Binder对象查找到 对应的Binder引用 ；
			
			记录Binder引用、Binder对象的归属地，即它们位于那个进程中 ；

			通过管理Binder强/弱引用 创建/销毁 Binder对象。

		
		驱动里的 Binder 是什么时候创建的？
			
			这就涉及到Binder的实名注册， Binder的注册也是跨进程通信的Binder通信，由系统预先创建的 ServiceManager服务来完成。
			

			例如： A服务需要向驱动注册， 那么A服务需要和 SM 进行跨进程的Binder通信，由SM来注册在驱动中。
			
			只需要记住所有进程都有 SM服务的Binder对象的引用，直接用即可，这样所有进程就可以 用此引用 向驱动注册了。
		
			程序 注册实名Binder时，不断向SM获取 SM的Binder对象的引用 S。注册后 不断的通过 S 将Binder从一个进程传递给另一个进程。
			越来越多的Binder 以flat_binder_object的形式 发给驱动并被处理.
			
			驱动将对这些穿越进程边界的Binder做如下操作：

				检查 传输结构flat_binder_object的type 变量：
					
					如果type的值为 BINDER_TYPE_BINDER 或 BINDER_TYPE_WEAK_BINDER
					if(type == BINDER_TYPE_BINDER|| type == BINDER_TYPE_WEAK_BINDER){
						
						在驱动中创建Binder对象
					}


					如果是BINDER_TYPE_HANDLE 或 BINDER_TYPE_WEAK_HANDLE

					if(type == BINDER_TYPE_HANDLE || type ==BINDER_TYPE_WEAK_HANDLE ){

						在驱动中创建Binder的引用
					
					}

					如果是BINDER_TYPE_HANDLE 则为进程打开文件,不创建任何数据结构。


				随着越来越多的Binder对象 或 引用 在进程间传递，驱动会在内核里创建越来越多的 节点 或 引用。



	Binder对象在驱动中的表述 ：Binder节点

		Binder节点是什么？
			在驱动中的Binder存放在Binder节点。此时的Binder由 binder_node 结构来表示.

			Binder节点描述结构：binder_node ：

				struct binder_proc *proc;  指向节点所属的进程，即提供该节点的进程。

				void __user *ptr;  指向用户空间Binder对象的指针

				union {

					struct rb_node rb_node;

					struct hlist_node dead_node;

				};

				
				其他成员，包括对Binder的强弱引用的计数，Binder线程的优先级等

		

		每个进程都有一棵红黑树，用于存放创建好的Binder节点，以Binder对象 在用户空间的指针作为索引。

		每当在传输数据中侦测到一个代表Binder对象的 flat_binder_object，则从中取出 binder变量的值 ，即Binder对象的指针 ,
		先用 此指针 为索引 搜索红黑树；如果没有找到 Binder节点，则创建并添加到红黑树。 
		
		在同一进程中，地址是唯一的，所以节点也是唯一的。
		
	
	Binder引用在驱动中的表述： 以 binder_ref 结构体表示 
		
		先看一下此结构体的重要成员：

			struct rb_node rb_node_desc; 每个进程有一棵红黑树，进程所有的Binder引用以 desc 为索引加入此红黑树中。

						     此树存放 表示Binder引用的 desc
							

			struct rb_node rb_node_node; 每个进程又有一棵红黑树，进程所有的Binder引用以 Binder节点(即node成员)  为索引加入此红黑树中。

						     此树存放 Binder节点的指针 node		


			uint32_t desc;		   本结构的引用号

			struct binder_node *node;  引用所指向的节点，即Binder节点。

			struct binder_proc *proc;  引用所属的进程 
			
			其他成员
	
	
		
		一个Binder对象由很多引用，这些引用分布在不同的进程当中，和Binder对象一样，每个进程使用一个红黑书存放正在使用的Binder引用。
		
		可以通过两种方式获取 Binder引用：
			驱动创建于内核 的binder_node的地址
			引用号：引用号是驱动为Binder引用分配的一个32位标识,在一个进程内是唯一的.


		Client 向 Server端的Binder对象 发送数据包时，Client将 引用号 填入binder_transaction_data结构的target.handle成员，
		以表明该数据包的目的Binder，  驱动根据该引用号 在红黑树中找到 该Binder引用的 binder_ref结构 ，
		进而通过其node成员知道目标Binder对象所在的进程及其它相关信息。

		Client-----发送引用号--->驱动
			---->在红黑树中查找 binder_ref
				---->获取 binder_ref的node成员
					--->获得到了binder_node 
						--->从中获取ptr，即Binder对象在用户空间的指针。


		0号引用是ServiceManager在驱动中由系统注册的，所有进程直接获取。所以所有的进程都可以直接用 ServiceManager.

		